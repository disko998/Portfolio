@import url('https://fonts.googleapis.com/css?family=Roboto:100,300,300i,400,500,700&display=swap');

// ___________________________ CONSTANTS __________________________________

// **** Variables ****
$break-small-phone: 350px;
$break-phone: 500px;
$break-small: 600px;
$break-medium: 847px;
$break-large: 1146px;
$min-desktop: 1300px;

$strong-border-radius: 40px;
$softBorderRadius: 10px;
$transitionDelay: .5s;
$transition-delay-long: 1s;
$skewDeg: 2deg;
$angleSize: 60px;

$project-size: 250px;
$container-max-width: 1440px;
$progress-bar-min-width: 400px;
$progress-bar-max-width: 700px;
$defaultPieSize: 8em;
$pieFontSize: $defaultPieSize / 4;

// **** Colors ****
$colors : (
    primary: #19B2F6,
    secondary: #B42B42,
    dark: #333,
    lightGray: #E9E8E8,
    gray: #C8C8C8,
    darkGray: #707070,
    black: #000000,
    white: #ffffff,
    linkedin: #2867B2,
    stackOverflow: #f48024,
    inspect: rgb(0, 255, 255),
    bg: rgb(199, 20, 124),
    warning: #ff9800,
    success: #4CAF50,
);


// **** Functions ****
@function color($color-name) {
    @return map-get($colors, $color-name)
};

@function rgbaColor($color-name, $opacity) {
    @if $color-name == primary {
        @return rgba(25, 178, 246, $opacity)
    }

    @else if $color-name == dark {
        @return rgba(51, 51, 51, $opacity)
    }
};

@function transition($properties...) {
    @each $prop in $properties {
      @return $prop $transitionDelay;
    }
  }

// **** Mixin ****
@mixin size($width, $height) {
    height: $height;
    width: $width;
};

@mixin transition($property) {
    transition: $property $transitionDelay ease-in-out;
};

@mixin draw-progress($progress, $color) {
    .pie {
        .half-circle {
            border-color: $color;
        }

        .left-side {
            transform: rotate($progress * 3.6deg);
        }

        @if $progress <= 50 {
            .right-side {
            display: none;
            }
        } @else {
            clip: rect(auto, auto, auto, auto);

            .right-side {
            transform: rotate(180deg);
            }
        }
    }
}

@mixin respond-to($media) {
    @if $media == phone {
        @media only screen and (max-width: $break-phone) {@content;}
    }

    @else if $media == small-phone {
        @media only screen and (max-width: $break-small-phone) {@content;}
    }

    @else if $media == small-tablet {
        @media only screen and (max-width: $break-small) {@content;}
    }

    @else if $media == tablet {
        @media only screen and (max-width: $break-medium) {@content;}
    }

    @else if $media == big-tablet {
        @media only screen and (max-width: $break-large) {@content;}
    }

    @else if $media == desktop {
        @media only screen and (min-width: $min-desktop) {@content;}
    }
}

@mixin create-list($type) {
    @if $type == col {
        ul {
            list-style-type: none;
            display: flex;
            flex-flow: column nowrap;
            width: fit-content;;
            overflow: hidden;
            @content;
        }
    }

    @else if $type == row {
        ul {
            list-style-type: none;
            display: flex;
            overflow: hidden;
            flex-flow: row nowrap;
            @content;
        }
    }
}

// ___________________________ CONSTANTS __________________________________




// **** Styles ****
// ########## Inspect #########
.i {
    border: 1px solid color(inspect) !important;
}

.i-2 {
    border: 1px solid color(black) !important;
}

.i-3 {
    border: 1px solid color(secondary) !important;
}

.b {
    background: color(bg) !important;
}

.b-2 {
    background: color(linkedin) !important;
}

.b-3 {
    background: color(gray) !important;
}

// ########## Containers #########
.container {
    max-width: $container-max-width;
    height: 100%;
    margin: 0 auto 0 auto;
    padding: 0 24px;
    overflow: hidden;
}

section, footer {
    padding: 8em 0 !important; 
}

// ########## Text #########
.text-light {
    font-weight: 100 !important;
}

.text-bold {
    font-weight: 500 !important;
}

.text-up {
    text-transform: uppercase !important;
}

.text-cap {
    text-transform: capitalize !important;
}

h1 {
    font-size: 200%;
    font-weight: 400;
    text-align: center;
    text-transform: uppercase;
    color: color(black);
    margin-bottom: 2em;

    &::before {
        content: '';
        display: block;
        width: 60px;
        height: 5px;
        background: color(secondary);
        margin: auto;
        border-radius: $strong-border-radius;
        margin-bottom: 20px;
    }
}

// ########## Inputs #########
.btn {
    padding: 10px 20px;
    border: none;
    text-align: center;
    cursor: pointer;
    outline: none;
}

.btn-border{
    background: transparent !important;
    border: 1px solid !important;
}

input, textarea {
    background: transparent;
    border: none;
    border-bottom: 2px solid color(darkGray);
    height: 50px;
    outline: none;
}

textarea {
    resize: none;
    overflow: hidden;
    height: auto;
}

// ########## Graphs #########
.pie-wrapper {
    @include size($defaultPieSize, $defaultPieSize);
    margin: 15px;
    position: relative;

    .pie {
        @include size(100%, 100%);
        clip: rect(0, $defaultPieSize, $defaultPieSize, $defaultPieSize / 2);
        left: 0;
        position: absolute;
        top: 0;
        z-index: 10;

        .half-circle {
            @include size(100%, 100%);
            border: ($defaultPieSize / 10) solid color(primary);
            border-radius: 50%;
            clip: rect(0, $defaultPieSize / 2, $defaultPieSize, 0);
            left: 0;
            position: absolute;
            top: 0;
        }
    }

    .pie-label {
        background: color(white);
        border-radius: 50%;
        display: flex;
        position: absolute;
        text-align: center;
        bottom: 0;
        top: 0;
        right: 0;
        left: 0;
        justify-content: center;
        align-items: center;

        .value {
            font-size: $pieFontSize;
            font-weight: 300;
            color: color(dark);
            text-align: center;
        }
        .smaller {
            color: color(dark);
            font-size: .45em;
            padding-bottom: 20px;
            vertical-align: super;
        }
    }

    .shadow {
        z-index: 1;
        position: absolute;
        @include size(100%, 100%);
        border: ($defaultPieSize / 10) solid color(gray);
        border-radius: 50%;
      }
}

.progress-bar {
    background: color(gray);
    border-radius: $strong-border-radius;
    position: relative;

    .value {
        position: absolute;
        right: 5px;
        font-weight: 300;
        color: color(dark);
    }
}

.progress {
    border-radius: $strong-border-radius;
    width: 85%;
    background: color(primary);
    height: 100%;
    position: absolute;
}

// ########## Utilities #########
.round {
    border-radius: $strong-border-radius;
}

// Flex
.f-row {
    display: flex !important;
    flex-flow: row nowrap;
}

.f-col {
    display: flex !important;
    flex-flow: column nowrap;
}

.space-around {
    justify-content: space-around !important;
}

.f-wrap {
    flex-wrap: wrap !important;
}

.f-center {
    justify-content: center !important;
    align-items: center !important;
}

.center {
    align-self: center !important;
}

.grow {
    flex-grow: 1;
}

.d-flex {
    display: flex !important;
}
